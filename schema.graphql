# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  avatar: ImageFieldOutput
  email: String
  password: PasswordState
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  avatar: ImageFieldInput
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  avatar: ImageFieldInput
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

type File {
  id: ID!
  name: String
  description: String
  file: FileFieldOutput
  updatedAt: DateTime
  createdAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input FileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input FileUpdateInput {
  name: String
  description: String
  file: FileFieldInput
  updatedAt: DateTime
  createdAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  name: String
  description: String
  file: FileFieldInput
  updatedAt: DateTime
  createdAt: DateTime
}

type Image {
  id: ID!
  name: String
  description: String
  image: ImageFieldOutput
  updatedAt: DateTime
  createdAt: DateTime
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ImageUpdateInput {
  name: String
  description: String
  image: ImageFieldInput
  updatedAt: DateTime
  createdAt: DateTime
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  description: String
  image: ImageFieldInput
  updatedAt: DateTime
  createdAt: DateTime
}

type BuildingMaterial {
  id: ID!
  materialName: String
  materialType: String
  manufacturer: String
  price: Int
  project: BuildingProject
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingMaterialWhereUniqueInput {
  id: ID
}

input BuildingMaterialWhereInput {
  AND: [BuildingMaterialWhereInput!]
  OR: [BuildingMaterialWhereInput!]
  NOT: [BuildingMaterialWhereInput!]
  id: IDFilter
  materialName: StringFilter
  materialType: StringFilter
  manufacturer: StringFilter
  price: IntNullableFilter
  project: BuildingProjectWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BuildingMaterialOrderByInput {
  id: OrderDirection
  materialName: OrderDirection
  materialType: OrderDirection
  manufacturer: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BuildingMaterialUpdateInput {
  materialName: String
  materialType: String
  manufacturer: String
  price: Int
  project: BuildingProjectRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingProjectRelateToOneForUpdateInput {
  create: BuildingProjectCreateInput
  connect: BuildingProjectWhereUniqueInput
  disconnect: Boolean
}

input BuildingMaterialUpdateArgs {
  where: BuildingMaterialWhereUniqueInput!
  data: BuildingMaterialUpdateInput!
}

input BuildingMaterialCreateInput {
  materialName: String
  materialType: String
  manufacturer: String
  price: Int
  project: BuildingProjectRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingProjectRelateToOneForCreateInput {
  create: BuildingProjectCreateInput
  connect: BuildingProjectWhereUniqueInput
}

type BuildingProject {
  id: ID!
  projectName: String
  projectType: String
  location: String
  duration: Int
  materialsRequired(where: BuildingMaterialWhereInput! = {}, orderBy: [BuildingMaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuildingMaterialWhereUniqueInput): [BuildingMaterial!]
  materialsRequiredCount(where: BuildingMaterialWhereInput! = {}): Int
  servicesRequired(where: BuildingServiceWhereInput! = {}, orderBy: [BuildingServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuildingServiceWhereUniqueInput): [BuildingService!]
  servicesRequiredCount(where: BuildingServiceWhereInput! = {}): Int
  tender: Tender
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingProjectWhereUniqueInput {
  id: ID
}

input BuildingProjectWhereInput {
  AND: [BuildingProjectWhereInput!]
  OR: [BuildingProjectWhereInput!]
  NOT: [BuildingProjectWhereInput!]
  id: IDFilter
  projectName: StringFilter
  projectType: StringFilter
  location: StringFilter
  duration: IntNullableFilter
  materialsRequired: BuildingMaterialManyRelationFilter
  servicesRequired: BuildingServiceManyRelationFilter
  tender: TenderWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BuildingMaterialManyRelationFilter {
  every: BuildingMaterialWhereInput
  some: BuildingMaterialWhereInput
  none: BuildingMaterialWhereInput
}

input BuildingServiceManyRelationFilter {
  every: BuildingServiceWhereInput
  some: BuildingServiceWhereInput
  none: BuildingServiceWhereInput
}

input BuildingProjectOrderByInput {
  id: OrderDirection
  projectName: OrderDirection
  projectType: OrderDirection
  location: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BuildingProjectUpdateInput {
  projectName: String
  projectType: String
  location: String
  duration: Int
  materialsRequired: BuildingMaterialRelateToManyForUpdateInput
  servicesRequired: BuildingServiceRelateToManyForUpdateInput
  tender: TenderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingMaterialRelateToManyForUpdateInput {
  disconnect: [BuildingMaterialWhereUniqueInput!]
  set: [BuildingMaterialWhereUniqueInput!]
  create: [BuildingMaterialCreateInput!]
  connect: [BuildingMaterialWhereUniqueInput!]
}

input BuildingServiceRelateToManyForUpdateInput {
  disconnect: [BuildingServiceWhereUniqueInput!]
  set: [BuildingServiceWhereUniqueInput!]
  create: [BuildingServiceCreateInput!]
  connect: [BuildingServiceWhereUniqueInput!]
}

input TenderRelateToOneForUpdateInput {
  create: TenderCreateInput
  connect: TenderWhereUniqueInput
  disconnect: Boolean
}

input BuildingProjectUpdateArgs {
  where: BuildingProjectWhereUniqueInput!
  data: BuildingProjectUpdateInput!
}

input BuildingProjectCreateInput {
  projectName: String
  projectType: String
  location: String
  duration: Int
  materialsRequired: BuildingMaterialRelateToManyForCreateInput
  servicesRequired: BuildingServiceRelateToManyForCreateInput
  tender: TenderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingMaterialRelateToManyForCreateInput {
  create: [BuildingMaterialCreateInput!]
  connect: [BuildingMaterialWhereUniqueInput!]
}

input BuildingServiceRelateToManyForCreateInput {
  create: [BuildingServiceCreateInput!]
  connect: [BuildingServiceWhereUniqueInput!]
}

input TenderRelateToOneForCreateInput {
  create: TenderCreateInput
  connect: TenderWhereUniqueInput
}

type BuildingService {
  id: ID!
  serviceName: String
  serviceDescription: String
  price: Int
  project: BuildingProject
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingServiceWhereUniqueInput {
  id: ID
}

input BuildingServiceWhereInput {
  AND: [BuildingServiceWhereInput!]
  OR: [BuildingServiceWhereInput!]
  NOT: [BuildingServiceWhereInput!]
  id: IDFilter
  serviceName: StringFilter
  serviceDescription: StringFilter
  price: IntNullableFilter
  project: BuildingProjectWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BuildingServiceOrderByInput {
  id: OrderDirection
  serviceName: OrderDirection
  serviceDescription: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BuildingServiceUpdateInput {
  serviceName: String
  serviceDescription: String
  price: Int
  project: BuildingProjectRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input BuildingServiceUpdateArgs {
  where: BuildingServiceWhereUniqueInput!
  data: BuildingServiceUpdateInput!
}

input BuildingServiceCreateInput {
  serviceName: String
  serviceDescription: String
  price: Int
  project: BuildingProjectRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ConstructionCompany {
  id: ID!
  name: String
  address: String
  type: String
  specialization: String
  experience: Int
  rating: Int
  certifications: String
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  tendersWon(where: TenderWhereInput! = {}, orderBy: [TenderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenderWhereUniqueInput): [Tender!]
  tendersWonCount(where: TenderWhereInput! = {}): Int
  tendersParticipated(where: TenderWhereInput! = {}, orderBy: [TenderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenderWhereUniqueInput): [Tender!]
  tendersParticipatedCount(where: TenderWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ConstructionCompanyWhereUniqueInput {
  id: ID
}

input ConstructionCompanyWhereInput {
  AND: [ConstructionCompanyWhereInput!]
  OR: [ConstructionCompanyWhereInput!]
  NOT: [ConstructionCompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  type: StringFilter
  specialization: StringFilter
  experience: IntNullableFilter
  rating: IntNullableFilter
  certifications: StringFilter
  reviews: ReviewManyRelationFilter
  tendersWon: TenderManyRelationFilter
  tendersParticipated: TenderManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input TenderManyRelationFilter {
  every: TenderWhereInput
  some: TenderWhereInput
  none: TenderWhereInput
}

input ConstructionCompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  type: OrderDirection
  specialization: OrderDirection
  experience: OrderDirection
  rating: OrderDirection
  certifications: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConstructionCompanyUpdateInput {
  name: String
  address: String
  type: String
  specialization: String
  experience: Int
  rating: Int
  certifications: String
  reviews: ReviewRelateToManyForUpdateInput
  tendersWon: TenderRelateToManyForUpdateInput
  tendersParticipated: TenderRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input TenderRelateToManyForUpdateInput {
  disconnect: [TenderWhereUniqueInput!]
  set: [TenderWhereUniqueInput!]
  create: [TenderCreateInput!]
  connect: [TenderWhereUniqueInput!]
}

input ConstructionCompanyUpdateArgs {
  where: ConstructionCompanyWhereUniqueInput!
  data: ConstructionCompanyUpdateInput!
}

input ConstructionCompanyCreateInput {
  name: String
  address: String
  type: String
  specialization: String
  experience: Int
  rating: Int
  certifications: String
  reviews: ReviewRelateToManyForCreateInput
  tendersWon: TenderRelateToManyForCreateInput
  tendersParticipated: TenderRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input TenderRelateToManyForCreateInput {
  create: [TenderCreateInput!]
  connect: [TenderWhereUniqueInput!]
}

type Tender {
  id: ID!
  title: String
  description: String
  budget: Int
  startDate: DateTime
  endDate: DateTime
  servicesRequired: String
  projectType: String
  participants(where: ConstructionCompanyWhereInput! = {}, orderBy: [ConstructionCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConstructionCompanyWhereUniqueInput): [ConstructionCompany!]
  participantsCount(where: ConstructionCompanyWhereInput! = {}): Int
  winner: ConstructionCompany
  createdAt: DateTime
  updatedAt: DateTime
}

input TenderWhereUniqueInput {
  id: ID
}

input TenderWhereInput {
  AND: [TenderWhereInput!]
  OR: [TenderWhereInput!]
  NOT: [TenderWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  budget: IntNullableFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  servicesRequired: StringFilter
  projectType: StringFilter
  participants: ConstructionCompanyManyRelationFilter
  winner: ConstructionCompanyWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ConstructionCompanyManyRelationFilter {
  every: ConstructionCompanyWhereInput
  some: ConstructionCompanyWhereInput
  none: ConstructionCompanyWhereInput
}

input TenderOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  budget: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  servicesRequired: OrderDirection
  projectType: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TenderUpdateInput {
  title: String
  description: String
  budget: Int
  startDate: DateTime
  endDate: DateTime
  servicesRequired: String
  projectType: String
  participants: ConstructionCompanyRelateToManyForUpdateInput
  winner: ConstructionCompanyRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ConstructionCompanyRelateToManyForUpdateInput {
  disconnect: [ConstructionCompanyWhereUniqueInput!]
  set: [ConstructionCompanyWhereUniqueInput!]
  create: [ConstructionCompanyCreateInput!]
  connect: [ConstructionCompanyWhereUniqueInput!]
}

input ConstructionCompanyRelateToOneForUpdateInput {
  create: ConstructionCompanyCreateInput
  connect: ConstructionCompanyWhereUniqueInput
  disconnect: Boolean
}

input TenderUpdateArgs {
  where: TenderWhereUniqueInput!
  data: TenderUpdateInput!
}

input TenderCreateInput {
  title: String
  description: String
  budget: Int
  startDate: DateTime
  endDate: DateTime
  servicesRequired: String
  projectType: String
  participants: ConstructionCompanyRelateToManyForCreateInput
  winner: ConstructionCompanyRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ConstructionCompanyRelateToManyForCreateInput {
  create: [ConstructionCompanyCreateInput!]
  connect: [ConstructionCompanyWhereUniqueInput!]
}

input ConstructionCompanyRelateToOneForCreateInput {
  create: ConstructionCompanyCreateInput
  connect: ConstructionCompanyWhereUniqueInput
}

type Review {
  id: ID!
  reviewText: String
  rating: Int
  company: ConstructionCompany
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  reviewText: StringFilter
  rating: IntNullableFilter
  company: ConstructionCompanyWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  reviewText: OrderDirection
  rating: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReviewUpdateInput {
  reviewText: String
  rating: Int
  company: ConstructionCompanyRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  reviewText: String
  rating: Int
  company: ConstructionCompanyRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createBuildingMaterial(data: BuildingMaterialCreateInput!): BuildingMaterial
  createBuildingMaterials(data: [BuildingMaterialCreateInput!]!): [BuildingMaterial]
  updateBuildingMaterial(where: BuildingMaterialWhereUniqueInput!, data: BuildingMaterialUpdateInput!): BuildingMaterial
  updateBuildingMaterials(data: [BuildingMaterialUpdateArgs!]!): [BuildingMaterial]
  deleteBuildingMaterial(where: BuildingMaterialWhereUniqueInput!): BuildingMaterial
  deleteBuildingMaterials(where: [BuildingMaterialWhereUniqueInput!]!): [BuildingMaterial]
  createBuildingProject(data: BuildingProjectCreateInput!): BuildingProject
  createBuildingProjects(data: [BuildingProjectCreateInput!]!): [BuildingProject]
  updateBuildingProject(where: BuildingProjectWhereUniqueInput!, data: BuildingProjectUpdateInput!): BuildingProject
  updateBuildingProjects(data: [BuildingProjectUpdateArgs!]!): [BuildingProject]
  deleteBuildingProject(where: BuildingProjectWhereUniqueInput!): BuildingProject
  deleteBuildingProjects(where: [BuildingProjectWhereUniqueInput!]!): [BuildingProject]
  createBuildingService(data: BuildingServiceCreateInput!): BuildingService
  createBuildingServices(data: [BuildingServiceCreateInput!]!): [BuildingService]
  updateBuildingService(where: BuildingServiceWhereUniqueInput!, data: BuildingServiceUpdateInput!): BuildingService
  updateBuildingServices(data: [BuildingServiceUpdateArgs!]!): [BuildingService]
  deleteBuildingService(where: BuildingServiceWhereUniqueInput!): BuildingService
  deleteBuildingServices(where: [BuildingServiceWhereUniqueInput!]!): [BuildingService]
  createConstructionCompany(data: ConstructionCompanyCreateInput!): ConstructionCompany
  createConstructionCompanies(data: [ConstructionCompanyCreateInput!]!): [ConstructionCompany]
  updateConstructionCompany(where: ConstructionCompanyWhereUniqueInput!, data: ConstructionCompanyUpdateInput!): ConstructionCompany
  updateConstructionCompanies(data: [ConstructionCompanyUpdateArgs!]!): [ConstructionCompany]
  deleteConstructionCompany(where: ConstructionCompanyWhereUniqueInput!): ConstructionCompany
  deleteConstructionCompanies(where: [ConstructionCompanyWhereUniqueInput!]!): [ConstructionCompany]
  createTender(data: TenderCreateInput!): Tender
  createTenders(data: [TenderCreateInput!]!): [Tender]
  updateTender(where: TenderWhereUniqueInput!, data: TenderUpdateInput!): Tender
  updateTenders(data: [TenderUpdateArgs!]!): [Tender]
  deleteTender(where: TenderWhereUniqueInput!): Tender
  deleteTenders(where: [TenderWhereUniqueInput!]!): [Tender]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  buildingMaterials(where: BuildingMaterialWhereInput! = {}, orderBy: [BuildingMaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuildingMaterialWhereUniqueInput): [BuildingMaterial!]
  buildingMaterial(where: BuildingMaterialWhereUniqueInput!): BuildingMaterial
  buildingMaterialsCount(where: BuildingMaterialWhereInput! = {}): Int
  buildingProjects(where: BuildingProjectWhereInput! = {}, orderBy: [BuildingProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuildingProjectWhereUniqueInput): [BuildingProject!]
  buildingProject(where: BuildingProjectWhereUniqueInput!): BuildingProject
  buildingProjectsCount(where: BuildingProjectWhereInput! = {}): Int
  buildingServices(where: BuildingServiceWhereInput! = {}, orderBy: [BuildingServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BuildingServiceWhereUniqueInput): [BuildingService!]
  buildingService(where: BuildingServiceWhereUniqueInput!): BuildingService
  buildingServicesCount(where: BuildingServiceWhereInput! = {}): Int
  constructionCompanies(where: ConstructionCompanyWhereInput! = {}, orderBy: [ConstructionCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConstructionCompanyWhereUniqueInput): [ConstructionCompany!]
  constructionCompany(where: ConstructionCompanyWhereUniqueInput!): ConstructionCompany
  constructionCompaniesCount(where: ConstructionCompanyWhereInput! = {}): Int
  tenders(where: TenderWhereInput! = {}, orderBy: [TenderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenderWhereUniqueInput): [Tender!]
  tender(where: TenderWhereUniqueInput!): Tender
  tendersCount(where: TenderWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
